{"version":3,"sources":["assets/kick.jpg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","drumSounds","Q","text","url","description","W","E","A","S","D","Z","X","C","Drumpad","props","state","current","handleKeyPress","bind","document","addEventListener","this","removeEventListener","e","char","String","fromCharCode","keyCode","play","id","getElementById","setState","drums","Object","keys","map","key","className","onClick","src","React","Component","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2HAAAA,EAAOC,QAAU,IAA0B,kC,2HCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCZFC,EAAa,CACfC,EAAG,CACDC,KAAM,IACNC,IAAK,0DACLC,YAAa,SAEfC,EAAG,CACDH,KAAM,IACNC,IAAK,+DACLC,YAAa,cAEfE,EAAG,CACDJ,KAAM,IACNC,IAAK,gEACLC,YAAa,eAEfG,EAAG,CACDL,KAAM,IACNC,IAAK,yDACLC,YAAa,mBAEfI,EAAG,CACDN,KAAM,IACNC,IAAK,0DACLC,YAAa,iBAEfK,EAAG,CACDP,KAAM,IACNC,IAAK,yDACLC,YAAa,UAEfM,EAAG,CACDR,KAAM,IACNC,IAAK,6DACLC,YAAa,cAEfO,EAAG,CACDT,KAAM,IACNC,IAAK,6DACLC,YAAa,QAEfQ,EAAG,CACDV,KAAM,IACNC,IAAK,yDACLC,YAAa,WAIXS,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,QAAS,IAEX,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBALL,E,iFASjBC,SAASC,iBAAiB,UAAWC,KAAKJ,kB,6CAG1CE,SAASG,oBAAoB,UAAWD,KAAKJ,kB,qCAGhCM,GACb,IAAIC,EAAOC,OAAOC,aAAaH,EAAEI,SAC7B3B,EAAWwB,IACbH,KAAKO,KAAKJ,K,2BAITK,GACHV,SAASW,eAAeD,GAAID,OAC5BP,KAAKU,SAAS,CACZf,QAAShB,EAAW6B,GAAX,gB,+BAIH,IAAD,OACDG,EAAQC,OAAOC,KAAKlC,GAAYmC,KAAI,SAACC,GAAD,OACxC,yBAAKC,UAAU,WAAWR,GAAE,eAAUO,GAAOE,QAAS,WAAO,EAAKV,KAAKQ,KACrE,uBAAGC,UAAU,WAAWD,GACxB,2BAAOC,UAAU,OAAOR,GAAIO,EAAKG,IAAKvC,EAAWoC,GAAX,UAI1C,OAAQ,yBAAKP,GAAG,gBACNG,EACA,yBAAKH,GAAG,WACN,2BAAIR,KAAKN,MAAMC,e,GAzCTwB,IAAMC,WA+C5BC,IAASC,OAAO,kBAAC,EAAD,MAAaxB,SAASW,eAAe,QD8B/C,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02e66ae4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kick.b44b2b4d.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/kick.jpg'\n\nvar drumSounds = {\n  Q: {\n    text: 'Q',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3',\n    description: 'Snare'\n  },\n  W: {\n    text: 'W',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3',\n    description: 'Side Stick'\n  },\n  E: {\n    text: 'E',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3',\n    description: 'Punchy Kick'\n  },\n  A: {\n    text: 'A',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3',\n    description: 'Closed High Hat'\n  },\n  S: {\n    text: 'S',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3',\n    description: 'Open High Hat'\n  },\n  D: {\n    text: 'D',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3',\n    description: 'Dsc Oh'\n  },\n  Z: {\n    text: 'Z',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3',\n    description: 'Kick n Hat'\n  },\n  X: {\n    text: 'X',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3',\n    description: 'Kick'\n  },\n  C: {\n    text: 'C',\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3',\n    description: 'Cymbal'\n  }\n}\n\nclass Drumpad extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: ''\n    }\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKeyPress);\n  }\n\n  handleKeyPress(e) {\n    var char = String.fromCharCode(e.keyCode);\n    if (drumSounds[char]) {\n      this.play(char);\n    }\n  }\n\n  play(id) {\n    document.getElementById(id).play();\n    this.setState({\n      current: drumSounds[id][\"description\"]\n    })\n  }\n\n  render() {\n    const drums = Object.keys(drumSounds).map((key) =>\n      <div className=\"drum-pad\" id={`drum-${key}`} onClick={() => {this.play(key)}}>\n        <p className=\"keyText\">{key}</p>\n        <audio className=\"clip\" id={key} src={drumSounds[key][\"url\"]}/>\n      </div>\n    );\n\n    return (<div id=\"drum-machine\">\n             {drums}\n              <div id=\"display\">\n                <p>{this.state.current}</p>\n              </div>\n            </div>);\n  }\n}\n\nReactDOM.render(<Drumpad />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}